USE Sakila;
-- List the number of films per category.
SELECT name, COUNT(f.film_id) as number_films
From category c
Join sakila.film_category fc on c.category_id = fc.category_id
Join film f on fc.film_id = f.film_id
group by c.category_id;

-- Retrieve the store ID, city, and country for each store.
SELECT s.store_id, co.country, c.city
FROM store AS s
LEFT JOIN city AS c ON s.address_id = c.city_id
INNER JOIN country As co ON c.country_id = co.country_id;

-- Calculate the total revenue generated by each store in dollars.
SELECT s.staff_id, s.store_id, sum(p.AMOUNT) as total_revenue
FROM payment p
LEFT JOIN staff AS s ON s.staff_id = p.staff_id
GROUP BY s.store_id, s.staff_id;

-- Determine the average running time of films for each category.
SELECT c.name, AVG(f.length) 
From category c
Join sakila.film_category fc on c.category_id = fc.category_id
Join film f on fc.film_id = f.film_id
group by c.category_id;

-- Identify the film categories with the longest average running time.
SELECT c.name, MAX(AVG(f.length)) AS average
From category c
Join sakila.film_category fc on c.category_id = fc.category_id
Join film f on fc.film_id = f.film_id
group by c.category_id;

-- Display the top 10 most frequently rented movies in descending order.
SELECT f.title, COUNT(f.rating) most_frequently
From film f
JOIN inventory i on f.film_id = i. film_id
JOIN rental r ON i.inventory_id = r.inventory_id
Group by f.title
Order by f.title desc
LIMIT 10;

-- Determine if "Academy Dinosaur" can be rented from Store 1
SELECT f.title, s.store_id, i.inventory_id, f.film_id
FROM inventory i
JOIN store s ON i.store_id = s.store_id
JOIN film f ON i.film_id = f.film_id
WHERE f.title = 'Academy Dinosaur' AND s.store_id = 1;

 -- Provide a list of all distinct film titles, along with their availability status in the inventory. Include a column indicating whether each title is 'Available' or 'NOT available.' Note that there are 42 titles that are not in the inventory, and this information can be obtained using a `CASE` statement combined with `IFNULL`.
SELECT f.title, COUNT(i.film_id) AS total_films_titles,
CASE
WHEN ISNULL(i.film_id) then 'Not Available'
ELSE 'Available'
END AS availability_status
FROM film f
LEFT JOIN inventory i ON f.film_id = i.film_id
GROUP BY f.film_id
ORDER BY f.film_id ASC;




